apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  description: Deploy an Argo Events based CI/CD Pipeline for your App
  name: cicd-pipeline
  title: Deploy CI/CD Pipeline
spec:
  owner: guest
  type: service
  parameters:
    - properties:
        appname:
          title: name of app for cicd
          type: string
        aws_region:
          default: us-west-2
          title: aws region for ecr repo
          type: string
        gitea_token:
          title: personal gitea token to create webhook (must have write:repository privilege)
          type: string
          ui:field: Secret
        dockerfile_path:
          title: Relative path to directory containing Dockerfile
          type: string
          default: .
        deployment_path:
          default: ./deployment
          title: Relative path to deployment directory in repo
          type: string
        hostname:
          title: DNS of management cluster. Example - modern-engg-XXXXXXXXXX.elb.us-west-2.amazonaws.com
          type: string
      title: Configuration Options
      required:
        - appname
        - hostname
        - gitea_token
  steps:
    - action: fetch:template
      name: Fetch Base
      id: fetch-base
      input:
        url: ./skeleton/
        values:
          appname: ${{ parameters.appname }}
          namespace: team-${{ parameters.appname }}
          aws_region: ${{ parameters.aws_region }}
          hostname: ${{parameters.hostname}}
          dockerfile_path: ${{parameters.dockerfile_path}}
          deployment_path: ${{parameters.deployment_path}}

    - id: publish
      name: Publishing to a gitea git repository
      action: publish:gitea
      input:
        description: CodeBuild create clusters template
        # Hard coded value for this demo purposes only.
        repoUrl: ${{parameters.hostname}}/gitea?repo=${{parameters.appname}}-cicd
        defaultBranch: main

    - action: fetch:template
      name: Fetch Provisioner
      id: fetch-provisioner
      input:
        url: ./provisioner/
        values:
          appname: ${{ parameters.appname }}
          namespace: team-${{ parameters.appname }}
          aws_region: ${{ parameters.aws_region }}
          hostname: ${{parameters.hostname}}
          gitea_token: ${{secrets.gitea_token}}
          dockerfile_path: ${{parameters.dockerfile_path}}
          deployment_path: ${{parameters.deployment_path}}

    - action: cnoe:kubernetes:apply
      name: Apply Provisioner IAM
      id: apply-prov-iam
      input:
        namespaced: true
        manifestPath: podidentity.yaml
        clusterName: local

    - action: debug:wait
      name: Wait for IAM
      input:
        seconds: 15

    - action: cnoe:kubernetes:apply
      name: Apply Workflow Templates
      id: apply-temp
      input:
        namespaced: true
        manifestPath: wf-templates.yaml
        clusterName: local

    - action: cnoe:kubernetes:apply
      name: Run Workflow 
      id: run-wf
      input:
        namespaced: true
        manifestPath: wf-run.yaml
        clusterName: local

    - id: create-argocd-app
      name: Create ArgoCD App
      action: cnoe:create-argocd-app
      input:
        appName: ${{parameters.appname}}-cicd
        appNamespace: team-${{ parameters.appname }}
        argoInstance: in-cluster
        projectName: default
        # necessary until we generate our own cert
        repoUrl: http://my-gitea-http.gitea.svc.cluster.local:3000/giteaAdmin/${{parameters.appname}}-cicd
        path: "manifests"
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps['publish'].output.repoContentsUrl }}
        catalogInfoPath: 'catalog-info.yaml'
  output:
    links:
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps['register'].output.entityRef }}
      - title: Open in argo workflows
        url: https://${{ parameters.hostname }}/argo-workflows/workflows/team-${{ parameters.appname }}



