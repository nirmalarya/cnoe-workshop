apiVersion: v1
kind: Namespace
metadata:
  name: team-${{values.appname}}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: ${{values.appname}}-cicd-sa
  namespace: ${{ values.namespace }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: ${{values.appname}}-cicd-sa-binding
  namespace: ${{ values.namespace }}
subjects:
- kind: ServiceAccount
  name: ${{values.appname}}-cicd-sa
roleRef:
  kind: Role
  name: ${{values.appname}}-argo-workflow-runner
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: ${{values.appname}}-argo-workflow-runner
  namespace: ${{ values.namespace }}
rules:
- apiGroups:
  - argoproj.io
  resources:
  - workflows
  - workflows/status
  - workflows/finalizers
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - ""
  resources:
  - pods
  - pods/log
  - persistentvolumeclaims
  verbs:
  - create
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - configmaps
  - secrets
  verbs:
  - get
  - watch
  - list
---
# PodIdentityAssociation
apiVersion: eks.aws.upbound.io/v1beta1
kind: PodIdentityAssociation
metadata:
  name: "${{values.appname}}-cicd-podidentity"
spec:
  forProvider:
    clusterName: "modern-engineering"
    namespace: "${{values.namespace}}"
    region: "${{values.aws_region}}"
    roleArnRef:
      name: "${{values.appname}}-cicd-iam-role"
    serviceAccount: "${{values.appname}}-cicd-sa"

---
# IAM Role
apiVersion: iam.aws.upbound.io/v1beta1
kind: Role
metadata:
  name: "${{values.appname}}-cicd-iam-role"
spec:
  forProvider:
    assumeRolePolicy: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Principal": {
              "Service": "pods.eks.amazonaws.com"
            },
            "Action": [
              "sts:AssumeRole",
              "sts:TagSession"
            ]
          }
        ]
      }

---
# IAM Policy
apiVersion: iam.aws.upbound.io/v1beta1
kind: Policy
metadata:
  name: "${{values.appname}}-cicd-ecr-access-policy"
spec:
  forProvider:
    description: ECR Access Policy
    policy: |
      {
        "Version": "2012-10-17",
        "Statement": [
          {
            "Effect": "Allow",
            "Action": [
                "ecr:GetAuthorizationToken",
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:GetRepositoryPolicy",
                "ecr:DescribeRepositories",
                "ecr:ListImages",
                "ecr:DescribeImages",
                "ecr:BatchGetImage",
                "ecr:GetLifecyclePolicy",
                "ecr:GetLifecyclePolicyPreview",
                "ecr:ListTagsForResource",
                "ecr:DescribeImageScanFindings",
                "ecr:InitiateLayerUpload",
                "ecr:UploadLayerPart",
                "ecr:CompleteLayerUpload",
                "ecr:PutImage"
            ],
            "Resource": "*"
          }
        ]
      }

---
# IAM Policy Attachment
apiVersion: iam.aws.upbound.io/v1beta1
kind: RolePolicyAttachment
metadata:
  name: "${{values.appname}}-cicd-ecr-access-policy-attachment"
spec:
  forProvider:
    policyArnRef:
      name: "${{values.appname}}-cicd-ecr-access-policy"
    roleRef:
      name: "${{values.appname}}-cicd-iam-role"

